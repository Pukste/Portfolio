library(neuralnet)
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)
plot(nn)
pr.nn <- compute(nn,test_[,1:13])
pr.nn_ <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.r <- (test_$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
print(paste(MSE.lm,MSE.nn))
par(mfrow=c(1,2))
plot(test$medv,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
plot(test$medv,pr.lm,col='blue',main='Real vs predicted lm',pch=18, cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='LM',pch=18,col='blue', bty='n', cex=.95)
plot(test$medv,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
points(test$medv,pr.lm,col='blue',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend=c('NN','LM'),pch=18,col=c('red','blue'))
install.packages("boot")
library(boot)
set.seed(200)
lm.fit <- glm(medv~.,data=data)
cv.glm(data,lm.fit,K=10)$delta[1]
set.seed(450)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- scaled[index,]
test.cv <- scaled[-index,]
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:13])
pr.nn <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
pbar$step()
mean(cv.error)
cv.error
boxplot(cv.error,xlab='MSE CV',col='cyan',
border='blue',names='CV error (MSE)',
main='CV error (MSE) for NN',horizontal=TRUE)
boxplot(cv.error,xlab='MSE CV',col='cyan',
border='blue',names='CV error (MSE)',
main='CV error (MSE) for NN',horizontal=TRUE)
boxplot()
boxplot(cv.error,xlab='MSE CV',col='cyan',
border='blue',names='CV error (MSE)',
main='CV error (MSE) for NN',horizontal=TRUE)
mean(cv.error)
cv.error
boxplot(cv.error,xlab='MSE CV',col='cyan',
border='blue',names='CV error (MSE)',
main='CV error (MSE) for NN',horizontal=TRUE)
mean(cv.error)
cv.error
cv.error
set.seed(450)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- scaled[index,]
test.cv <- scaled[-index,]
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:13])
pr.nn <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
pbar$step()
}
mean(cv.error)
cv.error
boxplot(cv.error,xlab='MSE CV',col='cyan',
border='blue',names='CV error (MSE)',
main='CV error (MSE) for NN',horizontal=TRUE)
set.seed(450)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- scaled[index,]
test.cv <- scaled[-index,]
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:13])
pr.nn <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
pbar$step()
}
setwd("~/")
setwd("c:/koulu/koneoppiminen/titanic")
View(data)
_train <- read.csv("train.csv")
_test <- read.csv("test.csv")
Ttest <- read.csv("test.csv")
Ttrain <- read.csv("train.csv")
Ttrain
summary(Ttrain)
str(Ttrain)
colnames(Ttrain)[apply(TTrain, 2, anyNA)]
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
colnames(Ttrain)[apply(Ttrain, 3, anyNA)]
average_age <- apply(Ttrain[,colnames(Ttrain) %in% list_na], 2, mean, na.rm = TRUE)
average_age <- apply(Ttrain$Age, 2, mean, na.rm = TRUE)
average_age <- mean(Ttrain$Age, na.rm = TRUE)
average_age
Tttrain[is.na(Ttrain$Age)] <- average_age
Ttrain[is.na(Ttrain$Age)] <- average_age
View(Ttrain)
View(Ttrain)
Ttrain[is.na(Ttrain)] <- average_age
Ttrain
View(train_)
View(train_)
View(Ttrain)
library("ranger")
View(Ttrain)
ranger()
help(ranger)
Titanic.model <- ranger(Survived ~ ., Ttrain, num.trees = 2000)
.
Titanic.model <- ranger(Survived ~ ., data=Ttrain, num.trees = 2000)
Titanic.model
View(Ttest)
Submission$PassagerId <- Ttest$PassengerId
Submission<- Ttest$PassengerId
Submission <- data.frame(PassagerId=integer(), Survived=integer())
View(Submission)
Submission$PassagerId <- Ttest$PassengerId
Submission <- data.frame(PassagerId=Ttest$PassengerId, Survived=integer())
Submission <- data.frame(PassagerId=Ttest$PassengerId)
Submission$Survived <- predict(Titanic.model, Ttest)
Ttest$Survived <- predict(Titanic.model, Ttest)
View(Ttest)
colnames(Ttest)[apply(Ttrain, 2, anyNA)]
colnames(Ttest)[apply(Ttest, 2, anyNA)]
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest[is.na(Ttest$Age)] <-average_test_age
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
View(Ttest)
Submission$Survived <- predict(Titanic.model, Ttest)
Ttest$Survived <- predict(Titanic.model, Ttest)
View(Titanic.model)
View(Ttrain)
Train <- subset(Ttrain, select = -c(Name, Cabin))
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
View(Titanic.model)
Ttest$Survived <- predict(Titanic.model, Ttest)
Test <- subset(Ttest, select = -c(Name,Cabin))
Test$Survived <- predict(Titanic.model, Test)
Survived <- predict(Titanic.model, Test)
View(Survived)
View(Test)
View(Survived)
Survived[["predictions"]]
Testing <- round(Survived$predictions)
Testing
Submission$Survived <- round(Survived$predictions)
View(Submission)
result <- read.csv("gender_submission.csv")
View(result)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
View(Submission)
write.csv(Submission,'submission.csv')
Submissions$PassagerId <- Ttest$PassengerId)
Submissions$PassagerId <- Ttest$PassengerId
Submissions <- Ttest$PassengerId
Submissions$Survived <- round(Survived$predictions)
View(Submissions)
Test$Survived <- round(Survived$predictions)
submission <- cbind(Test$PassengerId,Test$Survived)
write.csv(submission,'final_submission.csv')
View(Submission)
View(result)
write.csv(Submission,'submission.csv')
write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 20000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
Train <- subset(Ttrain, select = -c(Name)
Test <- subset(Ttest, select = -c(Name)
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
Train <- subset(Ttrain, select = -c(Name))
Test <- subset(Ttest, select = -c(Name))
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 20000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 1000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 1000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
write.csv(Submission,'submission.csv', row.names = FALSE)
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 1000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 5000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Ttest <- read.csv("test.csv")
na.omit(Ttest)
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
na.omit(Ttrain)
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
#removing names from train and test
Train <- subset(Ttrain, select = -c(Name))
Test <- subset(Ttest, select = -c(Name))
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 20000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 10000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
#inspecting data
summary(Ttrain)
str(Ttrain)
#checking train data for missing values
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
#age has missing values, let's replace them with mean
average_age <- mean(Ttrain$Age, na.rm = TRUE)
average_age
Ttrain[is.na(Ttrain)] <- average_age
#checking the test data for missing values
colnames(Ttest)[apply(Ttest, 2, anyNA)]
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
#removing names from train and test
Train <- subset(Ttrain, select = -c(Name))
Train$Age <- cut(Train$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
View(Train)
Train$Fare <- cut(Train$Fare, breaks = c(0,7.91,14.454), labels = c(0,1,2))
Train$Fare <- cut(Train$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
View(Train)
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
#inspecting data
summary(Ttrain)
str(Ttrain)
#checking train data for missing values
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
#age has missing values, let's replace them with mean
average_age <- mean(Ttrain$Age, na.rm = TRUE)
average_age
Ttrain[is.na(Ttrain)] <- average_age
#checking the test data for missing values
colnames(Ttest)[apply(Ttest, 2, anyNA)]
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
#removing names from train and test
Train <- subset(Ttrain, select = -c(Name))
Train$Age <- cut(Train$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Train$Fare <- cut(Train$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
Test <- subset(Ttest, select = -c(Name))
Test$Age <- cut(Test$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Test$Fare <- cut(Test$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
View(Test)
View(Ttest)
View(Ttrain)
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
#inspecting data
summary(Ttrain)
str(Ttrain)
#checking train data for missing values
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
#age has missing values, let's replace them with mean
#checking the test data for missing values
colnames(Ttest)[apply(Ttest, 2, anyNA)]
Train <- subset(Ttrain, select = -c(Name))
Train$Age <- cut(Train$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Train$Fare <- cut(Train$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
Test <- subset(Ttest, select = -c(Name))
Test$Age <- cut(Test$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Test$Fare <- cut(Test$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
average_age <- mean(Train$Age, na.rm = TRUE)
Train[is.na(Train)] <- average_age
average_test_age <- mean(Test$Age, na.rm = TRUE)
average_fare <- mean(Test$Fare, na.rm = TRUE)
Ttest$Age[is.na(Test$Age)] <-average_test_age
Ttest$Fare[is.na(Test$Fare)] <- average_fare
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
average_age <- mean(Ttrain$Age, na.rm = TRUE)
Ttrain[is.na(Ttrain)] <- average_age
average_test_age <- mean(Test$Age, na.rm = TRUE)
average_fare <- mean(Test$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
average_age <- mean(Ttrain$Age, na.rm = TRUE)
Ttrain[is.na(Ttrain)] <- average_age
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
#inspecting data
summary(Ttrain)
str(Ttrain)
#checking train data for missing values
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
#age and fare have missing values, let's replace them with mean
average_age <- mean(Ttrain$Age, na.rm = TRUE)
Ttrain[is.na(Ttrain)] <- average_age
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
#checking the test data for missing values
colnames(Ttest)[apply(Ttest, 2, anyNA)]
Train <- subset(Ttrain, select = -c(Name))
Train$Age <- cut(Train$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Train$Fare <- cut(Train$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
Test <- subset(Ttest, select = -c(Name))
Test$Age <- cut(Test$Age, breaks = c(0,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Test$Fare <- cut(Test$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
#inspecting data
summary(Ttrain)
str(Ttrain)
#checking train data for missing values
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
#age and fare have missing values, let's replace them with mean
average_age <- mean(Ttrain$Age, na.rm = TRUE)
Ttrain[is.na(Ttrain)] <- average_age
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
#checking the test data for missing values
colnames(Ttest)[apply(Ttest, 2, anyNA)]
Train <- subset(Ttrain, select = -c(Name))
Train$Age <- cut(Train$Age, breaks = c(-Inf,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Train$Fare <- cut(Train$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
Test <- subset(Ttest, select = -c(Name))
Test$Age <- cut(Test$Age, breaks = c(-Inf,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Test$Fare <- cut(Test$Fare, breaks = c(0,7.91,14.454,Inf), labels = c(0,1,2))
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
View(Train)
View(Ttrain)
Train <- subset(Ttrain, select = -c(Name))
View(Ttrain)
View(Train)
Ttrain <- read.csv("train.csv")
Ttest <- read.csv("test.csv")
#inspecting data
summary(Ttrain)
str(Ttrain)
#checking train data for missing values
colnames(Ttrain)[apply(Ttrain, 2, anyNA)]
#age and fare have missing values, let's replace them with mean
average_age <- mean(Ttrain$Age, na.rm = TRUE)
Ttrain[is.na(Ttrain)] <- average_age
average_test_age <- mean(Ttest$Age, na.rm = TRUE)
average_fare <- mean(Ttest$Fare, na.rm = TRUE)
Ttest$Age[is.na(Ttest$Age)] <-average_test_age
Ttest$Fare[is.na(Ttest$Fare)] <- average_fare
#checking the test data for missing values
colnames(Ttest)[apply(Ttest, 2, anyNA)]
Train <- subset(Ttrain, select = -c(Name))
Train$Age <- cut(Train$Age, breaks = c(-Inf,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Train$Fare <- cut(Train$Fare, breaks = c(-Inf,7.91,14.454,Inf), labels = c(0,1,2))
Test <- subset(Ttest, select = -c(Name))
Test$Age <- cut(Test$Age, breaks = c(-Inf,16,32,48,64,Inf), labels = c(0,1,2,3,4))
Test$Fare <- cut(Test$Fare, breaks = c(-Inf,7.91,14.454,Inf), labels = c(0,1,2))
#install.packages("ranger")
library("ranger")
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 2000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 1000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
Titanic.model <- ranger(Survived ~ ., data=Train, num.trees = 10000)
Submission <- data.frame(PassengerId=Ttest$PassengerId)
Survived <- predict(Titanic.model, Test)
Submission$Survived <- round(Survived$predictions)
library(gmodels)
CrossTable(x = result$Survived, y= Submission$Survived, prop.chisq = F)
#write.csv(Submission,'submission.csv', row.names = FALSE)
